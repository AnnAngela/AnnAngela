name: test gh release download

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: fetch rate limit first
        id: first
        run: |
          export rateLimitStatus=$(gh api /rate_limit | jq -c '.resources.core')
          echo "rateLimitStatus=$rateLimitStatus" >> $GITHUB_OUTPUT
          echo 'Current token rate limit status:'
          echo $rateLimitStatus | jq -r '.reset |= (tostring | tonumber | strflocaltime("%Y-%m-%d %H:%M:%S %Z"))  | to_entries | map([.key, .value]) | .[] | @tsv' | column -t
      - name: try gh release download
        run: gh release download v4.19.2 --repo "MaaAssistantArknights/MaaRelease"
      - name: calc rate limit usage
        run: |
          echo '${{ steps.first.outputs.rateLimitStatus }}'  > ${{ runner.temp }}/oldRateLimitStatus.json
          gh api /rate_limit | jq -c '.resources.core' > ${{ runner.temp }}/newRateLimitStatus.json
          echo 'Current token rate limit status:'
          jq -r '.reset |= (tostring | tonumber | strflocaltime("%Y-%m-%d %H:%M:%S %Z"))  | to_entries | map([.key, .value]) | .[] | @tsv' ${{ runner.temp }}/newRateLimitStatus.json | column -t
          printf "\n"
          echo "Rate limit used in this action: $(jq -n 'input as $oldRateLimitStatus | input as $newRateLimitStatus | $newRateLimitStatus.used - $oldRateLimitStatus.used' ${{ runner.temp }}/oldRateLimitStatus.json ${{ runner.temp }}/newRateLimitStatus.json)"
